name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_REGION: ${{ secrets.GCP_REGION }}
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: 
          - telegram_bot_service
          - translation_service
          - transport_service
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      working-directory: ${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pylint

    - name: Run linter
      working-directory: ${{ matrix.service }}
      run: |
        pylint **/*.py || true  # Не прерывать workflow при линтинге

    - name: Run tests
      working-directory: ${{ matrix.service }}
      run: |
        pytest --cov=./ --cov-report=xml

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - telegram-bot-service
          - translation-service
          - transport-service
    steps:
    - uses: actions/checkout@v4
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker
      run: |
        gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

    - name: Build and Push Docker Image
      env:
        SERVICE_NAME: ${{ matrix.service }}
        TELEGRAM_REPO_NAME: telegram-bot
        TRANSLATION_REPO_NAME: translation-service
        TRANSPORT_REPO_NAME: transport-service
      run: |
        # Определяем директорию проекта
        case "${{ matrix.service }}" in
          "telegram-bot-service")
            SERVICE_DIR="telegram_bot_service"
            REPO_NAME=$TELEGRAM_REPO_NAME
            ;;
          "translation-service")
            SERVICE_DIR="translation_service"
            REPO_NAME=$TRANSLATION_REPO_NAME
            ;;
          "transport-service")
            SERVICE_DIR="transport_service"
            REPO_NAME=$TRANSPORT_REPO_NAME
            ;;
          *)
            echo "Unknown service: ${{ matrix.service }}"
            exit 1
            ;;
        esac
        
        docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/$REPO_NAME/${{ matrix.service }}:${{ github.sha }} ./$SERVICE_DIR
        docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/$REPO_NAME/${{ matrix.service }}:${{ github.sha }}

    - name: Install gke-gcloud-auth-plugin
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates gnupg
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
        sudo apt-get update && sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

    - name: Deploy to GKE
      env:
        SERVICE_NAME: ${{ matrix.service }}
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.GKE_ZONE }}
        
        # Динамическая подстановка переменных в манифест
        sed -i "s/\${PROJECT_ID}/${{ env.PROJECT_ID }}/g" k8s/${{ matrix.service }}/deployment.yaml
        sed -i "s/\${GITHUB_SHA}/${{ github.sha }}/g" k8s/${{ matrix.service }}/deployment.yaml
        
        kubectl apply -f k8s/${{ matrix.service }}/

  security-scan:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    if: failure()
    needs: [test, build-and-deploy, security-scan]
    runs-on: ubuntu-latest
    steps:
    - name: Notify Failure
      run: |
        echo "CI/CD Pipeline failed. Check GitHub Actions for details."
        # Можно добавить отправку email или webhook